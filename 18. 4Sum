Total Accepted: 115540
Total Submissions: 437928
Difficulty: Medium
Contributor: LeetCode
Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note: The solution set must not contain duplicate quadruplets.

For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]
Subscribe to see which companies asked this question.

Hide Tags Array Hash Table Two Pointers
Hide Similar Problems (E) Two Sum (M) 3Sum (M) 4Sum II

*******************

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        if(nums.size() < 4) return {};
        
        int n = nums.size();
        int midRem, i , j;
        vector<vector<int>> res;
        
        sort(nums.begin(), nums.end());
        for(unsigned front = 0; front < n - 3; ++front){
            if(nums[front] + nums[front+1] + nums[front+2] + nums[front+3] > target) break;
            if(nums[front] + nums[n-3] + nums[n-2] + nums[n-1] < target) continue;
            
            for(unsigned rear = n - 1; rear > front + 2; --rear){
                if(nums[front] + nums[front+1] + nums[front+2] + nums[rear] > target) continue;
                if(nums[front] + nums[rear-2] + nums[rear-1] + nums[rear] < target) break;
                
                midRem = target - nums[front] - nums[rear];
                i = front + 1; j = rear - 1; 
                
                while(i < j){
                    if(nums[i] + nums[j] < midRem) ++i;
                    else if(nums[i] + nums[j] > midRem) --j;
                    else {
                       res.push_back({nums[front], nums[i++], nums[j--], nums[rear]}) ;
                       while(i < j && nums[i] == nums[i-1]) ++i;
                       while(i < j && nums[j] == nums[j+1]) --j;
                    }
                }
                while(rear > front + 2 && nums[rear] == nums[rear-1]) --rear;
            }//for rear
            while(front < n - 3 && nums[front] == nums[front + 1]) ++front;
        }//for front
        
        return res;
    }
};
