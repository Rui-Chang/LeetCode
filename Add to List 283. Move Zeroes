Total Accepted: 183137
Total Submissions: 371891
Difficulty: Easy
Contributor: LeetCode
Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].

Note:
You must do this in-place without making a copy of the array.
Minimize the total number of operations.
Credits:
Special thanks to @jianchao.li.fighter for adding this problem and creating all test cases.

Subscribe to see which companies asked this question.

Hide Tags Array Two Pointers
Hide Similar Problems (E) Remove Element

*********************

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int savepos, cur;
        
        // for(savepos = 0, cur = 0; cur < nums.size(); ++cur){
        //     if(nums[cur] != 0)
        //         nums[savepos++] = nums[cur];
        // }
        // while(savepos < nums.size()){
        //     nums[savepos++] = 0;
        // }
        
        /// Avoid writing for zero at rear and overhead of big object written.
        for(savepos = 0, cur = 0; cur < nums.size(); ++cur){
            if(nums[cur] != 0){
                //avoid all low efficiency of non-zero array
                //but extra overhead for comparing each time.
                if(savepos != cur) swap(nums[savepos], nums[cur]);
                ++savepos;
            }
        }
    }
};
