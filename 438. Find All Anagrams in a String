Total Accepted: 27281
Total Submissions: 81613
Difficulty: Easy
Contributors:
Stomach_ache
Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".
Subscribe to see which companies asked this question.

Hide Tags Hash Table
Hide Similar Problems (E) Valid Anagram (M) Permutation in String

************************************

class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        int len = p.size();
        vector<int> anagramPos;
        
        if(s.size() < len)
            return anagramPos;
        
        //Load the count map of p and corresponding
        //front sub-string part of s with the same length.
        vector<int> model(26, 0);
        vector<int> count(26, 0);
        int i;
        for(i = 0; i < len; i++){
            ++model[p[i] - 'a'];
            ++count[s[i] - 'a'];
        }
        
        if(isAnagram(count, model))
            anagramPos.push_back(0);
        
         while(i < s.size()){
            //pop head char of string 
            --count[s[i-len] - 'a'];
            //push current char to rear
            ++count[s[i] - 'a'];
            
            if(isAnagram(count, model))
                anagramPos.push_back((++i) - len);
        }

        return anagramPos;
    }
    
private:
    bool isAnagram(const vector<int> &countTable, const vector<int> &model)
    {
        for(int i = 0; i < model.size(); i++){
            if(countTable[i] != model[i])
                return false;
        }
        
        return true;
    }
};
