Total Accepted: 7142
Total Submissions: 15495
Difficulty: Medium
Contributors:
nberserk
Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.

Example:
Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output:  [1,2,4,7,5,3,6,8,9]
Explanation:

Note:
The total number of elements of the given matrix will not exceed 10,000.
Subscribe to see which companies asked this question.

***********************

class Solution {
public:
    vector<int> findDiagonalOrder(vector<vector<int>>& matrix) {
        vector<int> path;
        if(matrix.empty() || matrix[0].empty())
            return path;
            
        enum {up, down} direct = up;
        int row = matrix.size() - 1;
        int col = matrix[0].size() - 1;
        int i = 0, j = 0;
        
        while(i <= row && j <= col){
            path.push_back(matrix[i][j]);
            if(direct == up){
                //cross right border, move down
                if(j+1 > col){
                    ++i;
                    direct = down;
                }
                //cross up border, move right
                else if(i-1 < 0){
                    ++j;
                    direct = down;
                }
                //continue move up and right
                else{
                    --i; ++j;
                }
            }
            else{   //direct is down
                //cross bottom border, move right
                if(i+1 > row){
                    ++j;
                    direct = up;
                }
                //cross left border, move down
                else if(j-1 < 0){
                    ++i;
                    direct = up;
                }
                //continue move down and left
                else{
                    ++i; --j;
                }
            }
        }// while
        
        return path;
    }
};
