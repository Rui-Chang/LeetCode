Total Accepted: 6827
Total Submissions: 16539
Difficulty: Medium
Contributors:
love_Fawn
Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:
Input:nums = [1,1,1], k = 2
Output: 2
Note:
The length of the array is in range [1, 20,000].
The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].
Subscribe to see which companies asked this question.

Hide Tags Array Map
Hide Similar Problems (E) Two Sum (M) Continuous Subarray Sum

*************************

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        if(nums.empty()) return 0;
        unordered_map<int, int> sum_cnt;
        for(int i = 0, sum = 0; i < nums.size(); ++i){
            sum += nums[i];
            ++sum_cnt[sum];
        }
        // dismap(sum_cnt); cout << endl;
        int frontsum = 0, count = 0;
        count += sum_cnt[k];
        for(int i = 1; i < nums.size(); ++i){
            frontsum += nums[i-1];
            --sum_cnt[frontsum];
            // dismap(sum_cnt); cout << endl;
            if(sum_cnt.find(k+frontsum) != sum_cnt.end())
                count += sum_cnt[k+frontsum];
        }
        return count;
    }
};
