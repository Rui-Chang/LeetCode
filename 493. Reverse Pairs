Total Accepted: 4661
Total Submissions: 23962
Difficulty: Hard
Contributors:
ckcz123
Given an array nums, we call (i, j) an important reverse pair if i < j and nums[i] > 2*nums[j].

You need to return the number of important reverse pairs in the given array.

Example1:

Input: [1,3,2,3,1]
Output: 2
Example2:

Input: [2,4,3,5,1]
Output: 3
Note:
The length of the given array will not exceed 50,000.
All the numbers in the input array are in the range of 32-bit integer.
Subscribe to see which companies asked this question.

Hide Tags Binary Indexed Tree Segment Tree Binary Search Tree Divide and Conquer
Hide Similar Problems (H) Count of Smaller Numbers After Self (H) Count of Range Sum

*********************************

class Solution {
public:
    int reversePairs(vector<int>& nums) {
        if(nums.empty()) return 0;
        vector<int> temp(nums.size());
        reversePairs(nums, 0, nums.size(), temp);
        return revcount;
    }
    
private:
    void reversePairs(vector<int> &nums, int beg, int end, vector<int> &temp)
    {
        if(end - beg < 2) return;
        int mid = beg + (end - beg)/2;
        reversePairs(nums, beg, mid, temp);
        reversePairs(nums, mid, end, temp);
        //[beg, mid) and [mid, end) is already in descending order.
        for(int i = beg, j = mid; i <mid && j < end; ){
            if(nums[i] / 2.0 > nums[j]){
                revcount += end - j;
                ++i;
            }
            else ++j;
        }
        //revesePair inside [beg, end) has been gotten. Never mind internal order
        //in this interval. Mergesort it in descending order.
        int i, j, des;
        for(i = beg, j = mid, des = beg; i < mid && j < end; ){
            if(nums[i] >= nums[j]) temp[des++] = nums[i++];
            else temp[des++] = nums[j++];
        }
        while(i < mid) temp[des++] = nums[i++];
        while(j < end) temp[des++] = nums[j++];
        for(i = beg; i < end; ++i) nums[i] = temp[i];
    }
    
    int revcount = 0;
};
