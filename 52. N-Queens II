Total Accepted: 61831
Total Submissions: 140068
Difficulty: Hard
Contributor: LeetCode
Follow up for N-Queens problem.

Now, instead outputting board configurations, return the total number of distinct solutions.



Subscribe to see which companies asked this question.

Hide Tags Backtracking
Hide Similar Problems (H) N-Queens

**************

class Solution {
public:
    int totalNQueens(int n) {
        if(n < 1) return 0;
        int distinct = 0;
        //Record whether the column, diagonal or back-diagonal are safe. 
        vector<vector<bool>> flag = {vector<bool>(n, 1), vector<bool>(2*n, 1), vector<bool>(2*n, 1)};
        totalNQueens(n, 0, flag, distinct);
        return distinct;
    }
private:
    void totalNQueens(int n, int row, vector<vector<bool>> &flag, int &total)
    {
        if(row == n){   //Safely placing n queens.
            ++total;
            return;
        }    
        for(int col = 0; col < n; ++col){
            if(flag[0][col] && flag[1][row+col] && flag[2][n-col+row]){   //test if queen could be put on <row, col>
                flag[0][col] = flag[1][row+col] = flag[2][n-col+row] = 0; //Modify valid column, diagonal, back-diagonal
                totalNQueens(n, row+1, flag, total);  //Place queen at next row 
                flag[0][col] = flag[1][row+col] = flag[2][n-col+row] = 1; //Recover the chessboard state
            }
        }
    }
};
