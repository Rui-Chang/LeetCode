Given a list of strings, you need to find the longest uncommon subsequence among them. The longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be any subsequence of the other strings.

A subsequence is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.

The input will be a list of strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn't exist, return -1.

Example 1:
Input: "aba", "cdc", "eae"
Output: 3
Note:

All the given strings' lengths will not exceed 10.
The length of the given list will be in the range of [2, 50].
Subscribe to see which companies asked this question.

Hide Tags String
Show Similar Problems

**********

static bool isLess(const string &a, const string &b)
{
    if(a.size() == b.size())
        return (a < b);
    return (a.size() > b.size());
}

class Solution {
public:
    int findLUSlength(vector<string>& strs)
    {
        //Sorting strs primarily by the descending order of string length and
        //secondly by the order of alphabet.
        sort(strs.begin(), strs.end(), isLess);
            
        for(decltype(strs.size()) i = 0; i < strs.size(); ){
            //Find the first string diff with current
            auto j = i + 1;
            while(j < strs.size() && strs[j] == strs[i]){
                ++j;
            }
            //There are same strings as strs[i]
            if(j > i+1){
                i = j;
                continue;
            }
            
            //If reach here strs[i] is unique.
            //Check if it is a common sequence of previous longer strings.
            decltype(i) k;
            for(k = 0; k < i; ++k){
                if(isCommonSeq(strs[k], strs[i])){
                    ++i;
                    break;
                }
            }
            if(k == i)
                return static_cast<int>(strs[i].size());
        }
        
        return -1;
    }
    
private:
    bool isCommonSeq(string &a, string &b)
    {
        //b must be no longer than a
        if(a.size() < b.size())
            swap(a, b);
            
        decltype(a.size()) aI, bI;
        for(aI = 0, bI = 0; aI < a.size() && bI < b.size(); ++aI){
            if(a[aI] == b[bI])
                ++bI;
        }
        
        return (bI == b.size());
    }
};
