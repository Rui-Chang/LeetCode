Total Accepted: 100140
Total Submissions: 403776
Difficulty: Hard
Contributor: LeetCode
Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).

For example,
S = "ADOBECODEBANC"
T = "ABC"
Minimum window is "BANC".

Note:
If there is no such window in S that covers all characters in T, return the empty string "".

If there are multiple such windows, you are guaranteed that there will always be only one unique minimum window in S.

Subscribe to see which companies asked this question.

Hide Tags Hash Table Two Pointers String
Hide Similar Problems (H) Substring with Concatenation of All Words (M) Minimum Size Subarray Sum (H) Sliding Window Maximum (M) Permutation in String

******************************

class Solution {
public:
    string minWindow(string s, string t) {
        //Slide Window and HashMap Method
        int slen = s.size(), tlen = t.size();
        if(slen < tlen) return {};
        if(tlen == 0) return "";
        vector<int> m(256, 0);
        for(const auto c: t){
            ++m[c];
        }
        
        int beg = 0, end = 0, minlen = slen+1, begpos;
        int count = tlen;
        while(end < slen){
            while(end < slen && count != 0){    //probe the end of new window
                if(--m[s[end++]] >= 0) --count;
            }
            while(count == 0){  //remove redundant prefix
                if(++m[s[beg++]] > 0) ++count;
            }
            if(end - beg + 1 < minlen){ //update the length of window
                minlen = end - beg + 1;
                begpos = beg - 1;
                if(minlen == tlen) return s.substr(begpos, tlen);
            }
        }
        return (minlen < slen + 1)? (s.substr(begpos, minlen)): ("");
    }
};
